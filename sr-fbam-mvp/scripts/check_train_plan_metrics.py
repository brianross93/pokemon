#!/usr/bin/env python
"""Summarise plan-training metrics and highlight curriculum alerts."""

from __future__ import annotations

import argparse
import json
from pathlib import Path
from typing import Dict, Mapping, Optional


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Check train_plan metrics against curriculum heuristics.")
    parser.add_argument(
        "--metrics",
        type=Path,
        default=Path("results/train_plan/metrics.json"),
        help="Metrics JSON generated by train_battle_il.",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=None,
        help="Optional path to write the summary JSON.",
    )
    parser.add_argument("--strict", action="store_true", help="Exit with non-zero status when alerts are present.")
    return parser.parse_args()


def load_metrics(path: Path) -> Mapping[str, object]:
    if not path.exists():
        raise FileNotFoundError(f"Metrics file not found: {path}")
    with path.open("r", encoding="utf-8") as handle:
        return json.load(handle)


def extract_stats(metrics: Mapping[str, object], prefix: str) -> Dict[str, float]:
    return {
        "encode": float(metrics.get(f"{prefix}_gate_encode_frac", 0.0)),
        "lookup": float(metrics.get(f"{prefix}_gate_lookup_frac", 0.0)),
        "step": float(metrics.get(f"{prefix}_gate_step_frac", 0.0)),
        "skip": float(metrics.get(f"{prefix}_gate_skip_frac", 0.0)),
        "adherence_mean": float(metrics.get(f"{prefix}_adherence_mean", 0.0)),
        "adherence_positive": float(metrics.get(f"{prefix}_adherence_positive_frac", 0.0)),
    }


def main() -> int:
    args = parse_args()
    metrics = load_metrics(args.metrics)
    curriculum = metrics.get("curriculum") if isinstance(metrics, Mapping) else None
    alerts = metrics.get("curriculum_alerts") if isinstance(metrics, Mapping) else None

    train_stats = extract_stats(metrics, "train")
    val_stats = extract_stats(metrics, "val") if metrics.get("val_gate_encode_frac") is not None else None

    summary = {
        "metrics_path": str(args.metrics),
        "curriculum_config": curriculum.get("path") if isinstance(curriculum, Mapping) else None,
        "train_stats": train_stats,
        "val_stats": val_stats,
        "alerts": alerts,
    }

    print(json.dumps(summary, indent=2))

    if args.output:
        args.output.parent.mkdir(parents=True, exist_ok=True)
        args.output.write_text(json.dumps(summary, indent=2), encoding="utf-8")

    if args.strict and alerts:
        return 1
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
